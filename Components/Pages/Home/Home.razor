@page "/"
@rendermode InteractiveServer
@using SmartHome.Enums
@using SmartHome.Services
@using SmartHome.Models

<PageTitle>SmartHome | Home</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h3>Rooms</h3>
</div>

@if (rooms == null)
{
    <p>Loading...</p>
}
else
{
    <div class="row">
        @foreach (Room room in rooms)
        {
            <div class="col-md-6 mb-4">
                <div class="card h-100">
                    <div class="card-body">
                        <h4 class="card-title mb-3">@room.Name</h4>

                        @if (room.Lights.Any())
                        {
                            <div class="mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h6 class="card-subtitle mb-0">Lights</h6>
                                    <button
                                        class="btn @(room.Lights.All(l => l.IsOn) ? "btn-primary" : "btn-outline-primary") btn-sm"
                                        @onclick="@(() => ToggleAllLightsAsync(room.Id))">
                                        <i class="bi @(room.Lights.All(l => l.IsOn) ? "bi-lightbulb-fill" : "bi-lightbulb")"></i>
                                        Toggle All
                                    </button>
                                </div>
                                <div class="d-flex flex-wrap gap-2">
                                    @foreach (var light in room.Lights)
                                    {
                                        <span class="badge @(light.IsOn ? "bg-primary" : "bg-secondary")">
                                            <i class="bi @(light.IsOn ? "bi-lightbulb-fill" : "bi-lightbulb")"></i>
                                            @light.Name
                                        </span>
                                    }
                                </div>
                            </div>
                        }

                        @if (room.Speakers.Any())
                        {
                            <div>
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h6 class="card-subtitle mb-0">Speakers</h6>
                                    <button
                                        class="btn @(room.Speakers.All(s => s.State == SpeakerState.Playing) ? "btn-primary" : "btn-outline-primary") btn-sm"
                                        @onclick="@(() => ToggleAllSpeakersAsync(room.Id))">
                                        <i
                                            class="bi @(room.Speakers.All(s => s.State == SpeakerState.Playing) ? "bi-volume-up-fill" : "bi-volume-mute")"></i>
                                        Toggle All
                                    </button>
                                </div>
                                <div class="d-flex flex-wrap gap-2">
                                    @foreach (var speaker in room.Speakers)
                                    {
                                        <span class="badge @(speaker.State == SpeakerState.Playing ? "bg-primary" : "bg-secondary")">
                                            <i
                                                class="bi @(speaker.State == SpeakerState.Playing ? "bi-volume-up-fill" : "bi-volume-mute")"></i>
                                            @speaker.Name
                                        </span>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}