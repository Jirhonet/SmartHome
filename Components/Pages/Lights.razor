@page "/lights"
@rendermode InteractiveServer
@using SmartHome.Services
@using SmartHome.Models
@inject LightService LightService

<div class="d-flex justify-content-between align-items-center mb-4">
    <h3>Lights</h3>
    <div class="d-flex gap-3 align-items-center">
        <div class="input-group" style="width: 300px;">
            <span class="input-group-text">
                <i class="bi bi-search"></i>
            </span>
            <input type="text" class="form-control" placeholder="Search lights..." @bind-value="searchTerm"
                @bind-value:event="oninput" @bind-value:after="UpdateSearchTerm" />
            @if (!string.IsNullOrEmpty(searchTerm))
            {
                <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                    <i class="bi bi-x"></i>
                </button>
            }
        </div>
        <div class="btn-group">
            <button class="btn btn-success" @onclick="CreateNewLight">
                <i class="bi bi-plus-lg"></i> New
            </button>
            <button class="btn btn-primary" @onclick="EditSelectedLight" disabled="@(selectedLight == null)">
                <i class="bi bi-pencil"></i> Edit
            </button>
            <button class="btn btn-danger" @onclick="DeleteSelectedLight" disabled="@(selectedLight == null)">
                <i class="bi bi-trash"></i> Delete
            </button>
        </div>
    </div>
</div>

@if (lights == null)
{
    <p>Loading...</p>
}
else
{
    <div class="row">
        @foreach (Light light in lights)
        {
            <div class="col-md-4 mb-3">
                <div class="card @(selectedLight?.Id == light.Id ? "border-primary" : "")" @onclick="() => SelectLight(light)"
                    style="cursor: pointer;">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="card-title mb-0">@light.Name</h5>
                            <button class="btn @(light.IsOn ? "btn-primary" : "btn-outline-primary")"
                                @onclick="@(() => ToggleLightAsync(light.Id))" @onclick:preventDefault>
                                <i class="bi @(light.IsOn ? "bi-lightbulb-fill" : "bi-lightbulb")"></i>
                            </button>
                        </div>
                        <p class="card-text mt-2">
                            Status: @(light.IsOn ? "On" : "Off")<br />
                            Brightness: @light.Brightness%
                        </p>
                    </div>
                </div>
            </div>
        }
    </div>
}