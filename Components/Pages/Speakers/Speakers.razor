@page "/speakers"
@rendermode InteractiveServer
@using SmartHome.Enums
@using SmartHome.Services
@using SmartHome.Models

<PageTitle>SmartHome | Speakers</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h3>Speakers</h3>
    <div class="d-flex gap-3 align-items-center">
        <div class="input-group" style="width: 300px;">
            <span class="input-group-text">
                <i class="bi bi-search"></i>
            </span>
            <input type="text" class="form-control" placeholder="Search speakers..." @bind-value="searchTerm"
                @bind-value:event="oninput" @bind-value:after="UpdateSearchTerm" />
            @if (!string.IsNullOrEmpty(searchTerm))
            {
                <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                    <i class="bi bi-x"></i>
                </button>
            }
        </div>
        <div class="btn-group">
            <button class="btn btn-success" @onclick="CreateNewSpeaker">
                <i class="bi bi-plus-lg"></i> New
            </button>
            <button class="btn btn-primary" @onclick="EditSelectedSpeaker" disabled="@(selectedSpeaker == null)">
                <i class="bi bi-pencil"></i> Edit
            </button>
            <button class="btn btn-danger" @onclick="DeleteSelectedSpeaker" disabled="@(selectedSpeaker == null)">
                <i class="bi bi-trash"></i> Delete
            </button>
        </div>
    </div>
</div>

@if (speakers == null)
{
    <p>Loading...</p>
}
else
{
    <div class="row">
        @foreach (Speaker speaker in speakers)
        {
            <div class="col-md-4 mb-3">
                <div class="card @(selectedSpeaker?.Id == speaker.Id ? "border-primary" : "")"
                    @onclick="() => SelectSpeaker(speaker)" style="cursor: pointer;">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="card-title mb-0">@speaker.Name</h5>
                            <div class="btn-group">
                                <button class="btn @(speaker.State == SpeakerState.Off ? "btn-outline-primary" : "btn-primary")"
                                    @onclick="@(() => ToggleSpeakerAsync(speaker.Id))" @onclick:preventDefault>
                                    <i
                                        class="bi @(speaker.State == SpeakerState.Off ? "bi-volume-mute" : "bi-volume-up-fill")"></i>
                                </button>
                                @if (speaker.State != SpeakerState.Off)
                                {
                                    <button class="btn @(speaker.State == SpeakerState.Playing ? "btn-primary" : "btn-outline-primary")" @onclick ="@(() => PlayPauseSpeakerAsync(speaker.Id))"
                                        @onclick:preventDefault>
                                        <i class="bi @(speaker.State == SpeakerState.Playing ? "bi-pause" : "bi-play")"></i>
                                    </button>
                                }
                            </div>
                        </div>
                        <p class="card-text mt-2">
                            @(speaker.RoomId.HasValue ? "Room: " + speaker.RoomName : string.Empty)<br />
                            Status: @speaker.State<br />
                            Volume: @speaker.Volume%
                        </p>
                    </div>
                </div>
            </div>
        }
    </div>
}

<SpeakerDialog IsVisible="@showDialog" IsVisibleChanged="@(async (value) => showDialog = value)"
    Speaker="@dialogSpeaker" OnSave="@HandleSpeakerSave" Rooms="@rooms" />